# -*- coding: utf-8 -*-
"""Multi-Language Patient Communication System Implementation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MDlsBDFe1gT7bdSzwhlMzsVQ89H9NXzT
"""

import random
from datetime import datetime, timedelta
import pandas as pd
import matplotlib.pyplot as plt

# Enhanced patient database with age groups and response history
patients = [
    {"id": 1, "name": "Ravi Kumar", "language": "Tamil", "age_group": "60+", "channel": "IVR", "response_rate": 0.7},
    {"id": 2, "name": "Ananya Rao", "language": "Telugu", "age_group": "30-45", "channel": "WhatsApp", "response_rate": 0.9},
    {"id": 3, "name": "Joseph Mathew", "language": "Malayalam", "age_group": "45-60", "channel": "SMS", "response_rate": 0.6},
    {"id": 4, "name": "Rahul Sharma", "language": "Hindi", "age_group": "30-45", "channel": "WhatsApp", "response_rate": 0.8},
    {"id": 5, "name": "David Thomas", "language": "English", "age_group": "18-30", "channel": "WhatsApp", "response_rate": 0.95},
    {"id": 6, "name": "Geetha Rani", "language": "Tamil", "age_group": "60+", "channel": "IVR", "response_rate": 0.5},
    {"id": 7, "name": "Priya Reddy", "language": "Telugu", "age_group": "30-45", "channel": "SMS", "response_rate": 0.75},
    {"id": 8, "name": "Mohan Das", "language": "Hindi", "age_group": "45-60", "channel": "IVR", "response_rate": 0.65},
    {"id": 9, "name": "Susan George", "language": "English", "age_group": "18-30", "channel": "WhatsApp", "response_rate": 0.92},
    {"id": 10, "name": "Abdul Kareem", "language": "Malayalam", "age_group": "60+", "channel": "IVR", "response_rate": 0.55}
]

# Multi-language message templates for different communication types
messages = {
    "appointment_confirmation": {
        "Tamil": "роирпЛропро▒ро┐родро▓рпН: {appt_type}\nродрпЗродро┐: {date}\nроирпЗро░роорпН: {time}\nроЙроЩрпНроХро│рпН роирпЗро░роорпН роЙро▒рпБродро┐роЪрпЖропрпНропрокрпНрокроЯрпНроЯродрпБ. родропро╡рпБроЪрпЖропрпНродрпБ ро╡ро░рпБроХ!",
        "Telugu": "р░Ер░кр░╛р░пр░┐р░Вр░Яр▒Нр░ор▒Жр░Вр░Яр▒Н р░░р░Хр░В: {appt_type}\nр░др▒Зр░жр▒А: {date}\nр░╕р░ор░пр░В: {time}\nр░ор▒А р░ир░┐р░пр░╛р░ор░Хр░В р░ир░┐р░░р▒Нр░зр░╛р░░р░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐. р░жр░пр░Ър▒Зр░╕р░┐ р░░р░Вр░бр░┐!",
        "Malayalam": "р┤Ер┤кр╡Нр┤кр╡Лр┤пр┤┐р┤ир╡Нр┤▒р╡Нр┤ор╡Жр┤ир╡Нр┤▒р╡Н р┤др┤░р┤В: {appt_type}\nр┤др╡Ар┤пр┤др┤┐: {date}\nр┤╕р┤ор┤пр┤В: {time}\nр┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Ер┤кр╡Нр┤кр╡Лр┤пр┤┐р┤ир╡Нр┤▒р╡Нр┤ор╡Жр┤ир╡Нр┤▒р╡Н р┤╕р╡Нр┤ер┤┐р┤░р╡Ар┤Хр┤░р┤┐р┤Ър╡Нр┤Ър┤┐р┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б. р┤жр┤пр┤╡р┤╛р┤пр┤┐ р┤╡р┤░р╡В!",
        "Hindi": "рдЕрдкреЙрдЗрдВрдЯрдореЗрдВрдЯ рдкреНрд░рдХрд╛рд░: {appt_type}\nрддрд╛рд░реАрдЦ: {date}\nрд╕рдордп: {time}\nрдЖрдкрдХрд╛ рдЕрдкреЙрдЗрдВрдЯрдореЗрдВрдЯ рдХрдиреНрдлрд░реНрдо рд╣реЛ рдЧрдпрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдЖрдПрдВ!",
        "English": "Appointment Type: {appt_type}\nDate: {date}\nTime: {time}\nYour appointment is confirmed. Please visit!"
    },
    "wait_time_update": {
        "Tamil": "родро▒рпНрокрпЛродрпИроп роХро╛родрпНродро┐ро░рпБрокрпНрокрпБ роирпЗро░роорпН: {minutes} роиро┐рооро┐роЯроЩрпНроХро│рпН. родропро╡рпБ роЪрпЖропрпНродрпБ рокрпКро▒рпБроорпИропро╛роХ роЗро░рпБроЩрпНроХро│рпН.",
        "Telugu": "р░кр▒Нр░░р░╕р▒Нр░др▒Бр░д р░╡р▒Зр░Яр░┐р░Вр░Чр▒Н р░Яр▒Ир░ор▒Н: {minutes} р░ир░┐р░ор░┐р░╖р░╛р░▓р▒Б. р░жр░пр░Ър▒Зр░╕р░┐ р░╕р░╣р░ир░В р░╡р░╣р░┐р░Вр░Ър░Вр░бр░┐.",
        "Malayalam": "р┤ир┤┐р┤▓р┤╡р┤┐р┤▓р╡Ж р┤Хр┤╛р┤др╡Нр┤др┤┐р┤░р┤┐р┤кр╡Нр┤кр╡Н р┤╕р┤ор┤пр┤В: {minutes} р┤ор┤┐р┤ир┤┐р┤▒р╡Нр┤▒р╡Н. р┤жр┤пр┤╡р┤╛р┤пр┤┐ р┤Хр╡Нр┤╖р┤ор┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.",
        "Hindi": "рд╡рд░реНрддрдорд╛рди рдкреНрд░рддреАрдХреНрд╖рд╛ рд╕рдордп: {minutes} рдорд┐рдирдЯред рдХреГрдкрдпрд╛ рдзреИрд░реНрдп рд░рдЦреЗрдВред",
        "English": "Current waiting time: {minutes} minutes. Please be patient."
    },
    "prescription_reminder": {
        "Tamil": "роирпЛропро▒ро┐родро▓рпН: {appt_type}\nроЙроЩрпНроХро│рпН рооро░рпБроирпНродрпБроХро│рпН родропро╛ро░ро╛роХ роЙро│рпНро│рой. роЕрокрпНрокро▓рпНро▓рпЛ роХро┐ро│ро┐ройро┐роХрпНроХро┐ро▓рпН рокрпЖро▒рпНро▒рпБроХрпНроХрпКро│рпНро│ро╡рпБроорпН.",
        "Telugu": "р░Ер░кр░╛р░пр░┐р░Вр░Яр▒Нр░ор▒Жр░Вр░Яр▒Н р░░р░Хр░В: {appt_type}\nр░ор▒А р░ор░Вр░жр▒Бр░▓р▒Б р░╕р░┐р░жр▒Нр░зр░Вр░Чр░╛ р░Йр░ир▒Нр░ир░╛р░пр░┐. р░Ер░кр▒Лр░▓р▒Л р░Хр▒Нр░▓р░┐р░ир░┐р░Хр▒Н р░╡р░жр▒Нр░ж р░╕р▒Зр░Хр░░р░┐р░Вр░Ър░Вр░бр░┐.",
        "Malayalam": "р┤Ер┤кр╡Нр┤кр╡Лр┤пр┤┐р┤ир╡Нр┤▒р╡Нр┤ор╡Жр┤ир╡Нр┤▒р╡Н р┤др┤░р┤В: {appt_type}\nр┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤ор┤░р╡Бр┤ир╡Нр┤ир╡Бр┤Хр╡╛ р┤др┤пр╡Нр┤пр┤╛р┤▒р┤╛р┤гр╡Н. р┤Ер┤кр╡Нр┤кр╡Лр┤│р╡Л р┤Хр╡Нр┤▓р┤┐р┤ир┤┐р┤Хр╡Нр┤Хр┤┐р╡╜ р┤╢р╡Зр┤Цр┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.",
        "Hindi": "рдЕрдкреЙрдЗрдВрдЯрдореЗрдВрдЯ рдкреНрд░рдХрд╛рд░: {appt_type}\nрдЖрдкрдХреА рджрд╡рд╛рдПрдВ рддреИрдпрд╛рд░ рд╣реИрдВред рдЕрдкреЛрд▓реЛ рдХреНрд▓рд┐рдирд┐рдХ рд╕реЗ рд▓реЗ рд▓реЗрдВред",
        "English": "Appointment Type: {appt_type}\nYour medications are ready. Please collect from Apollo Clinic."
    }
}

def select_channel(patient, message_type):
    """Enhanced channel selection with fallback logic"""
    # Default to patient's preferred channel
    channel = patient["channel"]

    # Special cases
    if message_type == "wait_time_update" and patient["age_group"] in ["18-30", "30-45"]:
        channel = "WhatsApp"  # Faster delivery for time-sensitive updates

    # Fallback for low responders
    if patient["response_rate"] < 0.6:
        if channel == "SMS":
            channel = "WhatsApp"
        elif channel == "WhatsApp":
            channel = "IVR"

    return channel

def generate_message(patient, message_type, **kwargs):
    """Generate personalized message with proper formatting"""
    template = messages[message_type][patient["language"]]

    # Special formatting for elderly patients
    if patient["age_group"] == "60+":
        if "time" in kwargs:
            if patient["language"] == "Tamil":
                kwargs["time"] = kwargs["time"].replace("AM", "роХро╛ро▓рпИ").replace("PM", "рооро╛ро▓рпИ")
            elif patient["language"] == "Hindi":
                kwargs["time"] = kwargs["time"].replace("AM", "рд╕реБрдмрд╣").replace("PM", "рд╢рд╛рдо")

    return template.format(**kwargs)

def send_message(patient, message_type, **kwargs):
    """Enhanced message sending with tracking"""
    channel = select_channel(patient, message_type)
    message = generate_message(patient, message_type, **kwargs)

    # Simulate actual sending with 90% success rate
    send_success = random.random() < 0.9

    if send_success:
        print(f"ЁЯУй [{channel}] to {patient['name']} ({patient['language']}, {patient['age_group']}):")
        print(f"   {message}\n")
        return True
    else:
        print(f"тЭМ Failed to send to {patient['name']} via {channel}")
        return False

def simulate_clinic_operations(days=7):
    """Run a multi-day simulation of clinic communications"""
    results = []

    for day in range(days):
        current_date = datetime.now() + timedelta(days=day)
        print(f"\n=== Day {day+1} ({current_date.strftime('%Y-%m-%d')}) ===")

        # Shuffle patients to randomize selection
        random.shuffle(patients)

        # Select patients for appointments (30% of patients each day)
        for patient in patients[:int(len(patients)*0.3)]:
            # Appointment confirmation (24 hours before)
            appt_type = random.choice(appointment_types)
            appt_time = random.choice(["9:00 AM", "11:30 AM", "2:00 PM", "4:30 PM"])

            send_success = send_message(
                patient,
                "appointment_confirmation",
                appt_type=appt_type,
                date=current_date.strftime('%d/%m/%Y'),
                time=appt_time
            )

            if send_success:
                # Simulate patient response
                responded = random.random() < patient["response_rate"]

                # Wait time update on appointment day (for those who confirmed)
                if responded:
                    wait_time = random.randint(10, 90)
                    send_message(
                        patient,
                        "wait_time_update",
                        minutes=wait_time
                    )

                results.append({
                    "patient_id": patient["id"],
                    "day": day+1,
                    "message_type": "appointment_confirmation",
                    "channel": patient["channel"],
                    "language": patient["language"],
                    "age_group": patient["age_group"],
                    "responded": responded
                })

    return pd.DataFrame(results)

def analyze_results(results):
    """Analyze and visualize the simulation results"""
    if len(results) == 0:
        print("No results to analyze")
        return

    # Convert to DataFrame if not already
    if not isinstance(results, pd.DataFrame):
        results = pd.DataFrame(results)

    # Calculate overall response rate
    overall_rate = results['responded'].mean()
    print(f"\nOverall Response Rate: {overall_rate:.1%}")

    # Response rate by language
    lang_response = results.groupby('language')['responded'].mean().sort_values()

    # Response rate by channel
    channel_response = results.groupby('channel')['responded'].mean().sort_values()

    # Response rate by age group
    age_response = results.groupby('age_group')['responded'].mean().sort_values()

    # Plotting
    plt.figure(figsize=(15, 5))

    plt.subplot(1, 3, 1)
    lang_response.plot(kind='barh', color='skyblue')
    plt.title('Response Rate by Language')
    plt.xlabel('Response Rate')

    plt.subplot(1, 3, 2)
    channel_response.plot(kind='barh', color='lightgreen')
    plt.title('Response Rate by Channel')
    plt.xlabel('Response Rate')

    plt.subplot(1, 3, 3)
    age_response.plot(kind='barh', color='salmon')
    plt.title('Response Rate by Age Group')
    plt.xlabel('Response Rate')

    plt.tight_layout()
    plt.show()

    return {
        'language_analysis': lang_response,
        'channel_analysis': channel_response,
        'age_analysis': age_response
    }

if __name__ == "__main__":
    print("=== Apollo Clinic Communication System Simulation ===")
    print(f"Simulating for {len(patients)} patients...\n")

    # Run 7-day simulation
    results = simulate_clinic_operations(days=7)

    # Analyze results
    if len(results) > 0:
        analysis = analyze_results(results)

        print("\nKey Findings:")
        print(f"- Best responding language: {analysis['language_analysis'].idxmax()} ({analysis['language_analysis'].max():.1%})")
        print(f"- Most effective channel: {analysis['channel_analysis'].idxmax()} ({analysis['channel_analysis'].max():.1%})")
        print(f"- Best responding age group: {analysis['age_analysis'].idxmax()} ({analysis['age_analysis'].max():.1%})")
    else:
        print("No messages were sent during the simulation period")